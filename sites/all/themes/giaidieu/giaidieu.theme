<?php

/**
 * @file
 * Functions to support theming in the giaidieu theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Language\LanguageInterface;

// Take over admin login.
//$user = Drupal\user\Entity\User::load(1);  
//user_login_finalize($user);

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function giaidieu_preprocess_html(&$variables) {
  //  kint($variables);
  if ($node = \Drupal::request()->attributes->get('node')) {
    $variables['attributes']['class'][] = 'page-node-' . $node->id();
  }
  $current_path = \Drupal::service('path.current')->getPath();
  $variables['current_path'] = \Drupal::service('path.alias_manager')
    ->getAliasByPath($current_path);
}

/**
 * Implements hook_preprocess_block() for block content.
 */
function giaidieu_preprocess_block(&$variables) {
  //kint($variables);
}

/**
 * Implements hook_preprocess_page() for block content.
 */
function giaidieu_preprocess_page(&$variables) {
  // Load logo path to theme.
  $uid = \Drupal::currentUser()->id();
  // kint($uid);
  if (!$variables['is_front']) {
    $variables['logo'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));
    
    // Retrieve an array which contains the path pieces.
    $current_path = \Drupal::service('path.current')->getPath();
    $path_args = explode('/', $current_path);
    
    //$node_type = $variables['node']->getType();
    //$theme_path = drupal_get_path('theme', 'giaidieu');

    //kint($theme_path . '/css/theme/' . $node_type . '.css');
    //kint($path_args);
    // kint($variables['node']->getType());
    // kint($variables);

    // $theme = array (
    //   '#theme' => 'flag_count',
    // );
    // $variables['flag_link'] = drupal_render($theme);
  }
  else {
    $variables['#attached']['library'][] = 'giaidieu/home-styling';
  }
}

/**
 * Implements hook_preprocess_node() for block content.
 */
function giaidieu_preprocess_node(&$variables) {
  $node_type = $variables['node']->getType();
  $view_mode = $variables['view_mode'];

  if($node_type = 'articles') {
    $socialsharingblock = \Drupal\block\Entity\Block::load('socialsharingblock_2');
    $socialsharingblock_content = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($socialsharingblock);
    $variables['socialsharingblock_node'] = $socialsharingblock_content;

    $bieumautimkiem_block = \Drupal\block\Entity\Block::load('bieumautimkiem');
    $bieumautimkiem_block_content = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($bieumautimkiem_block);
    $variables['bieumautimkiem_node'] = $bieumautimkiem_block_content;

    $date = $variables['node']->getCreatedTime();
    $variables['date'] = \Drupal::service('date.formatter')->formatInterval(REQUEST_TIME - $date);

    $statistics = statistics_get($variables['node']->id());
    $variables['node_stats'] = \Drupal::translation()->formatPlural($statistics['totalcount'], $statistics['totalcount'], '@count views');
  
    $nid = $variables['node']->nid->value;
    $num_comment = db_query('SELECT comment_count FROM {comment_entity_statistics} WHERE entity_id = ' . $nid)->fetchAssoc();
    $variables['comment_count'] = $num_comment['comment_count'];
    
    // $node = $variables['elements']['#node'];
    // $flag_link_service = \Drupal::service('flag.link_builder');
    // $flag_link = $flag_link_service->build($node->getEntityTypeId(), $node->id(), 'bookmark');

    // $variables['flag_link'] = $flag_link;

    if ($view_mode =='teaser' || $view_mode =='full') {
      $node = $variables['node'];
      $flag_link_service = \Drupal::service('flag.link_builder');
      $flag_link = $flag_link_service->build($node->getEntityTypeId(), $node->id(), 'bookmark');
      $variables['flag_link'] = $flag_link;
    }
  }
}

/**
 * Implements hook_preprocess_maintenance_page().
 */
function giaidieu_preprocess_maintenance_page(&$variables) {
}

/**
 * Implements hook_link_alter().
 */
function giaidieu_user_login($account) {
}

function giaidieu_preprocess_views_view(&$variables) {
}

